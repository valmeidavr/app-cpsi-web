const mysql = require('mysql2/promise');
const bcrypt = require('bcrypt');

// Configura√ß√£o do banco de dados
const dbConfig = {
  host: process.env.MYSQL_HOST || 'localhost',
  port: process.env.MYSQL_PORT || 3306,
  user: process.env.MYSQL_USER || 'root',
  password: process.env.MYSQL_PASSWORD || 'root',
  database: process.env.MYSQL_ACCESS_DB || 'cpsi_acesso'
};

async function testAdminUser() {
  let connection;
  
  try {
    console.log('üîç Conectando ao banco de dados...');
    connection = await mysql.createConnection(dbConfig);
    console.log('‚úÖ Conex√£o estabelecida com sucesso!');

    // Verificar estrutura das tabelas
    console.log('\nüìã Verificando estrutura das tabelas...');
    
    const [tables] = await connection.execute(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = ?
      ORDER BY table_name
    `, [dbConfig.database]);
    
    console.log('üìä Tabelas encontradas:');
    tables.forEach(table => {
      console.log(`   - ${table.table_name}`);
    });

    // Verificar usu√°rio admin
    console.log('\nüë§ Verificando usu√°rio admin...');
    const [adminUser] = await connection.execute(
      'SELECT login, nome, email, status FROM usuarios WHERE login = ?',
      ['admin']
    );

    if (adminUser.length === 0) {
      console.log('‚ùå Usu√°rio admin n√£o encontrado!');
      return;
    }

    const user = adminUser[0];
    console.log('‚úÖ Usu√°rio admin encontrado:');
    console.log(`   Login: ${user.login}`);
    console.log(`   Nome: ${user.nome}`);
    console.log(`   Email: ${user.email}`);
    console.log(`   Status: ${user.status}`);

    // Verificar permiss√µes do usu√°rio
    console.log('\nüîê Verificando permiss√µes do usu√°rio...');
    const [permissions] = await connection.execute(`
      SELECT us.sistemas_id, us.nivel, s.nome as sistema_nome 
      FROM usuario_sistema us 
      INNER JOIN sistemas s ON us.sistemas_id = s.id 
      WHERE us.usuarios_login = ?
    `, [user.login]);

    if (permissions.length === 0) {
      console.log('‚ùå Nenhuma permiss√£o encontrada para o usu√°rio admin!');
    } else {
      console.log('‚úÖ Permiss√µes encontradas:');
      permissions.forEach(perm => {
        console.log(`   - Sistema: ${perm.sistema_nome} (ID: ${perm.sistemas_id})`);
        console.log(`   - N√≠vel: ${perm.nivel}`);
      });
    }

    // Testar autentica√ß√£o
    console.log('\nüîë Testando autentica√ß√£o...');
    const [userWithPassword] = await connection.execute(
      'SELECT login, senha, nome, email FROM usuarios WHERE login = ? AND status = ?',
      ['admin', 'Ativo']
    );

    if (userWithPassword.length === 0) {
      console.log('‚ùå Usu√°rio admin n√£o encontrado ou inativo!');
      return;
    }

    const userData = userWithPassword[0];
    console.log('‚úÖ Usu√°rio encontrado para autentica√ß√£o');

    // Testar senha
    const testPassword = 'admin123';
    console.log(`üîê Testando senha: ${testPassword}`);
    
    try {
      // Verificar se o hash come√ßa com $2y$, converter para $2a$ para compatibilidade
      let hashToCompare = userData.senha;
      if (hashToCompare.startsWith('$2y$')) {
        hashToCompare = hashToCompare.replace('$2y$', '$2a$');
        console.log('üîÑ Hash convertido para compatibilidade');
      }
      
      const isPasswordValid = await bcrypt.compare(testPassword, hashToCompare);
      
      if (isPasswordValid) {
        console.log('‚úÖ Senha v√°lida! Autentica√ß√£o funcionando corretamente.');
      } else {
        console.log('‚ùå Senha inv√°lida! Verifique a configura√ß√£o.');
      }
    } catch (error) {
      console.error('‚ùå Erro ao verificar senha:', error);
    }

    // Verificar todos os usu√°rios
    console.log('\nüìä Listando todos os usu√°rios...');
    const [allUsers] = await connection.execute(
      'SELECT login, nome, email, status FROM usuarios ORDER BY login'
    );
    
    console.log(`Total de usu√°rios: ${allUsers.length}`);
    allUsers.forEach((u, index) => {
      console.log(`   ${index + 1}. ${u.login} - ${u.nome} (${u.status})`);
    });

  } catch (error) {
    console.error('‚ùå Erro ao testar usu√°rio admin:', error);
    throw error;
  } finally {
    if (connection) {
      await connection.end();
      console.log('\nüîå Conex√£o com banco de dados fechada.');
    }
  }
}

// Executar o script
if (require.main === module) {
  testAdminUser()
    .then(() => {
      console.log('\n‚úÖ Teste executado com sucesso!');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Erro na execu√ß√£o do teste:', error);
      process.exit(1);
    });
}

module.exports = { testAdminUser };

